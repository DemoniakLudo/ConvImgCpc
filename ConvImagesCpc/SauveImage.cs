using ConvImgCpc;
using System;
using System.IO;

namespace CpcConvImg {
	static public class SauveImage {
		/*
		Conversion palette OCP+ :

		static byte CpcVGA[ 28 ] = "TDU\\X]LEMVFW^@_NGORBSZY[JCK";

												W^@_NGORBSZY[JCK = 
												FEDCBA9876543210
		(3 premiers octets /12 de la palette = composante R,B,V)
		*/

		static byte[] CodeStd = new byte[36] {  // Routine à mettre en #C7D0
			0x3A, 0xD0, 0xD7,               //      LD      A,  (#D7D0)
			0xCD, 0x1C, 0xBD,               //      CALL    #BD1C
			0x21, 0xD1, 0xD7,               //      LD      HL, #D7D1
			0x46,                           //      LD      B,  (HL)
			0x48,                           //      LD      C,  B
			0xCD, 0x38, 0xBC,               //      CALL    #BC38
			0xAF,                           //      XOR     A
			0x21, 0xD1, 0xD7,               //      LD      HL, #D7D1
			0x46,                           // BCL: LD      B,  (HL)
			0x48,                           //      LD      C,  B
			0xF5,                           //      PUSH    AF
			0xE5,                           //      PUSH    HL
			0xCD, 0x32, 0xBC,               //      CALL    #BC32
			0xE1,                           //      POP     HL
			0xF1,                           //      POP     AF
			0x23,                           //      INC     HL
			0x3C,                           //      INC     A
			0xFE, 0x10,                     //      CP      #10
			0x20, 0xF1,                     //      JR      NZ,BCL
			0xC3, 0x18, 0xBB,               //      JP      #BB18
			};

		static byte[] CodeP0 = new byte[47] {
			0xF3, 0x01, 0x11, 0xBC, 0x21, 0xD0, 0xDF, 0x7E,
			0xED, 0x79, 0x23, 0x0D, 0x20, 0xF9, 0x01, 0xA0,
			0x7F, 0x3A, 0xD0, 0xD7, 0xED, 0x79, 0xED, 0x49,
			0x01, 0xB8, 0x7F, 0xED, 0x49, 0x21, 0xD1, 0xD7,
			0x11, 0x00, 0x64, 0x01, 0x22, 0x00, 0xED, 0xB0,
			0xCD, 0xD0, 0xCF, 0x38, 0xFB, 0xFB, 0xC9
			};

		static byte[] CodeP1 = new byte[39] {
			0x01, 0x0E, 0xF4, 0xED, 0x49, 0x01, 0xC0, 0xF6,
			0xED, 0x49, 0xAF, 0xED, 0x79, 0x01, 0x92, 0xF7,
			0xED, 0x49, 0x01, 0x45, 0xF6, 0xED, 0x49, 0x06,
			0xF4, 0xED, 0x78, 0x01, 0x82, 0xF7, 0xED, 0x49,
			0x01, 0x00, 0xF6, 0xED, 0x49, 0x17, 0xC9
			};

		static byte[] CodeP3 = new byte[17] { 0xFF, 0x00, 0xFF, 0x77, 0xB3, 0x51, 0xA8, 0xD4, 0x62, 0x39, 0x9C, 0x46, 0x2B, 0x15, 0x8A, 0xCD, 0xEE };

		static byte[] CodeOv = new byte[83] {
			0x21, 0x47, 0x08, 0xCD, 0x36, 0x08, 0x3A, 0x00,
			0x08, 0xCD, 0x1C, 0xBD, 0x21, 0x01, 0x08, 0xAF,
			0x4E, 0x41, 0xF5, 0xE5, 0xCD, 0x32, 0xBC, 0xE1,
			0xF1, 0x23, 0x3C, 0xFE, 0x10, 0x20, 0xF1, 0xCD,
			0x18, 0xBB, 0x21, 0x57, 0x08, 0x01, 0x00, 0xBC,
			0x7E, 0xA7, 0xC8, 0xED, 0x79, 0x04, 0x23, 0x7E,
			0xED, 0x79, 0x23, 0x05, 0x18, 0xF2, 0x01, 0x30,
			0x02, 0x32, 0x03, 0x89, 0x06, 0x22, 0x07, 0x23,
			0x0C, 0x0D, 0x0D, 0x00, 0x00, 0x00, 0x01, 0x28,
			0x02, 0x2E, 0x03, 0x8E, 0x06, 0x19, 0x07, 0x1E,
			0x0C, 0x30, 0x00
			};

		static byte[] CodeOvP = new byte[142] {
			0xF3, 0x01, 0x11, 0xBC, 0x21, 0x86, 0x08, 0x04,
			0xED, 0xA3, 0x0D, 0x20, 0xFA, 0x21, 0x97, 0x08,
			0xCD, 0x75, 0x08, 0x01, 0xB8, 0x7F, 0x3A, 0x00,
			0x08, 0xED, 0x49, 0xED, 0x79, 0x21, 0x01, 0x08,
			0x11, 0x00, 0x64, 0x01, 0x20, 0x00, 0xED, 0xB0,
			0xAF, 0x01, 0x0E, 0xF4, 0xED, 0x49, 0x01, 0xC0,
			0xF6, 0xED, 0x49, 0xED, 0x79, 0x01, 0x92, 0xF7,
			0xED, 0x49, 0x01, 0x45, 0xF6, 0xED, 0x49, 0x06,
			0xF4, 0xED, 0x78, 0x01, 0x82, 0xF7, 0xED, 0x49,
			0x17, 0x38, 0xDD, 0x01, 0xA0, 0x7F, 0xED, 0x49,
			0xFB, 0x21, 0xA5, 0x08, 0x01, 0xBC, 0x00, 0x7E,
			0xA7, 0xC8, 0xED, 0x79, 0x04, 0x23, 0x7E, 0xED,
			0x79, 0x23, 0x05, 0x18, 0xF2, 0xFF, 0x00, 0xFF,
			0x77, 0xB3, 0x51, 0xA8, 0xD4, 0x62, 0x39, 0x9C,
			0x46, 0x2B, 0x15, 0x8A, 0xCD, 0xEE, 0x01, 0x30,
			0x02, 0x32, 0x06, 0x22, 0x07, 0x23, 0x0C, 0x0D,
			0x0D, 0x00, 0x00, 0x00, 0x01, 0x28, 0x02, 0x2E,
			0x06, 0x19, 0x07, 0x1E, 0x0C, 0x30
			};

		static byte[] ModePal = new byte[48];

		static char[] CpcVGA = new char[27] { 'T', 'D', 'U', '\\', 'X', ']', 'L', 'E', 'M', 'V', 'F', 'W', '^', '@', '_', 'N', 'G', 'O', 'R', 'B', 'S', 'Z', 'Y', '[', 'J', 'C', 'K' };

		static public int SauveEcran(string NomFic, BitmapCpc bitmap, bool CpcPlus) {
			bool Overscan = (bitmap.NbLig * bitmap.NbCol > 0x3F00);
			bool WithCode = true; // ###
			if (CpcPlus) {
				ModePal[0] = (byte)(bitmap.ModeCPC | 0x8C);
				int k = 1;
				for (int i = 0; i < 16; i++) {
					ModePal[k++] = (byte)bitmap.Palette[i];
					ModePal[k++] = (byte)(bitmap.Palette[i] >> 8);
				}
				ModePal[k++] = ModePal[1];
				ModePal[k++] = ModePal[2];
			}
			else {
				ModePal[0] = (byte)bitmap.ModeCPC;
				for (int i = 0; i < 16; i++)
					if (bitmap.ModeCPC < 3)
						ModePal[1 + i] = (byte)bitmap.Palette[i];
					else
						ModePal[1 + i] = (byte)CpcVGA[bitmap.Palette[i]];
			}

			byte[] imgCpc = bitmap.bmpCpc;
			if (WithCode) {
				if (!Overscan) {
					Buffer.BlockCopy(ModePal, 0, imgCpc, 0x17D0, ModePal.Length);
					if (CpcPlus) {
						Buffer.BlockCopy(CodeP0, 0, imgCpc, 0x07D0, CodeP0.Length);
						Buffer.BlockCopy(CodeP1, 0, imgCpc, 0x0FD0, CodeP1.Length);
						Buffer.BlockCopy(CodeP3, 0, imgCpc, 0x1FD0, CodeP3.Length);
					}
					else
						Buffer.BlockCopy(CodeStd, 0, imgCpc, 0x07D0, CodeStd.Length);
				}
				else {
					if (bitmap.NbLig == 272 && bitmap.NbCol == 96) {
						Buffer.BlockCopy(ModePal, 0, imgCpc, 0x600, ModePal.Length);
						if (CpcPlus)
							Buffer.BlockCopy(CodeOvP, 0, imgCpc, 0x621, CodeOvP.Length);
						else
							Buffer.BlockCopy(CodeOv, 0, imgCpc, 0x611, CodeOv.Length);
					}
				}
			}

			int Lg = bitmap.Size;
			BinaryWriter fp = new BinaryWriter(new FileStream(NomFic, FileMode.Create));
			CpcAmsdos entete = CpcSystem.CreeEntete(NomFic, (short)(Overscan ? 0x200 : 0xC000), (short)Lg, (short)(Overscan ? CpcPlus ? 0x821 : 0x811 : 0xC7D0));
			fp.Write(CpcSystem.AmsdosToByte(entete));
			fp.Write(bitmap.bmpCpc, 0, Lg);
			fp.Close();
			return (Lg);
		}
	}
}
